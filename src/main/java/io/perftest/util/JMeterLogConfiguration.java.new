package io.perftest.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

/**
 * Utility class to configure JMeter logging
 * This class sets the system property to redirect JMeter logs to the test-specific folders
 */
public class JMeterLogConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(JMeterLogConfiguration.class);
    private static boolean initialized = false;
    private static final String DEFAULT_PROTOCOL = "default";
    
    // Store the timestamp and unique ID that get generated during log configuration
    // These can then be reused for JTL and HTML reports
    private static String currentTimestamp;
    private static String currentUniqueId;
    
    /**
     * Configure JMeter logging to use the target directory
     * This method sets the jmeter.logfile system property to point to a test-specific log file
     */
    public static void configureJMeterLogs() {
        configureJMeterLogs(DEFAULT_PROTOCOL);
    }
    
    /**
     * Configure JMeter logging for a specific protocol
     * This method sets the jmeter.logfile system property to point to a protocol-specific log file
     * 
     * @param protocolName The name of the protocol being tested
     */
    public static void configureJMeterLogs(String protocolName) {
        try {
            String logFile = configureLogging(protocolName);
            logger.info("JMeter logs configured to use {}", logFile);
            initialized = true;
        } catch (IOException e) {
            logger.error("Failed to configure JMeter logs: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Configure JMeter logging for a specific protocol and return the log file path
     * This method sets the jmeter.logfile system property to point to a protocol-specific log file
     * 
     * @param protocolName The name of the protocol being tested
     * @return The path to the configured log file as a string
     * @throws IOException If there is an error creating the log directories
     */
    public static String configureLogging(String protocolName) throws IOException {
        // Create base directories if they don't exist
        Path targetDir = Paths.get("target");
        if (!Files.exists(targetDir)) {
            Files.createDirectories(targetDir);
        }
        
        // Create protocol-specific log directory with timestamp and unique ID
        currentTimestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        currentUniqueId = UUID.randomUUID().toString().substring(0, 8);
        
        // Create a unique directory for this test run
        Path testLogDir = targetDir.resolve("logs").resolve(protocolName);
        Path uniqueTestLogDir = testLogDir.resolve(currentTimestamp + "_" + currentUniqueId);
        
        if (!Files.exists(uniqueTestLogDir)) {
            Files.createDirectories(uniqueTestLogDir);
        }
        
        // Create a unique log file name for this test run
        Path logFile = uniqueTestLogDir.resolve("jmeter.log");
        
        // Set JMeter log file location
        System.setProperty("jmeter.logfile", logFile.toString());
        
        // Also try to set Apache JMeter log file property (alternative property name)
        System.setProperty("apache.jmeter.log", logFile.toString());
        
        // Let's try setting the log directory as well
        System.setProperty("jmeter.home", uniqueTestLogDir.toString());
        
        // Set additional properties to prevent JMeter from using/overwriting files in bin directory
        System.setProperty("jmeter.save.saveservice.output_format", "xml");
        System.setProperty("jmeter.reportgenerator.exporter.html.property.output_dir", uniqueTestLogDir.toString());
        
        return logFile.toString();
    }
    
    /**
     * Configure JMeter logging to write to a specific directory
     * This allows reusing the directory structure created by TestEngine
     * 
     * @param protocolName The name of the protocol being tested
     * @param directoryPath The directory path where logs should be stored
     * @return The path to the configured log file as a string
     * @throws IOException If there is an error creating the log directories
     */
    public static String configureLoggingToDirectory(String protocolName, String directoryPath) throws IOException {
        Path logDir = Paths.get(directoryPath);
        if (!Files.exists(logDir)) {
            Files.createDirectories(logDir);
        }
        
        // Create a logs subdirectory in the given directory
        Path logsDir = logDir.resolve("logs");
        if (!Files.exists(logsDir)) {
            Files.createDirectories(logsDir);
        }
        
        // Create log files in the logs directory
        Path jmeterLog = logsDir.resolve("jmeter.log");
        Path perfTestLog = logsDir.resolve(protocolName + ".log");
        
        // Set JMeter log file location
        System.setProperty("jmeter.logfile", jmeterLog.toString());
        System.setProperty("apache.jmeter.log", jmeterLog.toString());
        System.setProperty("jmeter.home", logDir.toString());
        
        // Set additional properties to prevent JMeter from using/overwriting files in bin directory
        System.setProperty("jmeter.save.saveservice.output_format", "xml");
        System.setProperty("jmeter.reportgenerator.exporter.html.property.output_dir", logDir.toString());
        
        // Store the directory path for other components to use
        System.setProperty("perftest.log.dir", logsDir.toString());
        
        return perfTestLog.toString();
    }
    
    /**
     * Get the current timestamp for this test run
     * This can be used to create consistently named directories for logs, JTL files, and HTML reports
     * 
     * @return The current timestamp string (yyyy-MM-dd_HH-mm-ss format)
     */
    public static String getCurrentTimestamp() {
        // Generate a new timestamp if none exists yet
        if (currentTimestamp == null) {
            currentTimestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        }
        return currentTimestamp;
    }
    
    /**
     * Get the current unique ID for this test run
     * 
     * @return The current unique ID string
     */
    public static String getCurrentUniqueId() {
        // Generate a new unique ID if none exists yet
        if (currentUniqueId == null) {
            currentUniqueId = UUID.randomUUID().toString().substring(0, 8);
        }
        return currentUniqueId;
    }
}
